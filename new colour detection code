//placeholder for all the rgb values. To be determined during lab-time
void colour_Detector(long color_Input[3])
{
//averaged color values
//long colourInput[3] = {red_input, green_input, blue_input};

// format is name[colour of the paper] [red, green, blue values]
long colourDetectionMax[6][3]; 
colourDetectionMax[0][3] = {0, 0, 0}; //white paper rgb values
colourDetectionMax[1][3] = {0, 0, 0}; //red paper rgb values
colourDetectionMax[2][3] = {0, 0, 0}; //green paper rgb values
colourDetectionMax[3][3] = {0, 0, 0}; //orange paper rgb values
colourDetectionMax[4][3] = {0, 0, 0}; //purple paper rgb values
colourDetectionMax[5][3] = {0, 0, 0}; //blue paper rgb values
 
// format is name[colour of the paper] [red, green, blue values]
long colourDetectionMin[6][3]; 
colourDetectionMin[0][3] = {0, 0, 0}; //white paper rgb values
colourDetectionMin[1][3] = {0, 0, 0}; //red paper rgb values
colourDetectionMin[2][3] = {0, 0, 0}; //green paper rgb values
colourDetectionMin[3][3] = {0, 0, 0}; //orange paper rgb values
colourDetectionMin[4][3] = {0, 0, 0}; //purple paper rgb values
colourDetectionMin[5][3] = {0, 0, 0}; //blue paper rgb values



void check_colour(long colourInput, long colourDetection) {
  if ((colourInput[0] >= colourDetectionMin[0][0] && colourInput[0] <= colourDetectionMax[0][0]) ||
      (colourInput[1] >= colourDetectionMin[0][1] && colourInput[1] <= colourDetectionMax[0][1]) ||
      (colourInput[2] >= colourDetectionMin[0][2] && colourInput[2] <= colourDetectionMax[0][2])) {
        //when white is detected stop the mbot.
        stop_move();
      }
  if ((colourInput[0] >= colourDetectionMin[1][0] && colourInput[0] <= colourDetectionMax[1][0]) ||
      (colourInput[1] >= colourDetectionMin[1][1] && colourInput[1] <= colourDetectionMax[1][1]) ||
      (colourInput[2] >= colourDetectionMin[1][2] && colourInput[2] <= colourDetectionMax[1][2])) {
        //when red is detected do a left-turn on the spot.
        turn_left();    
      }
  if ((colourInput[0] >= colourDetectionMin[2][0] && colourInput[0] <= colourDetectionMax[2][0]) ||
      (colourInput[1] >= colourDetectionMin[2][1] && colourInput[1] <= colourDetectionMax[2][1]) ||
      (colourInput[2] >= colourDetectionMin[2][2] && colourInput[2] <= colourDetectionMax[2][2]))) {
        //when green is detected do a right-turn on the spot.
        turn_right();
      }
  if ((colourInput[0] >= colourDetectionMin[3][0] && colourInput[0] <= colourDetectionMax[3][0]) ||
      (colourInput[1] >= colourDetectionMin[3][1] && colourInput[1] <= colourDetectionMax[3][1]) ||
      (colourInput[2] >= colourDetectionMin[3][2] && colourInput[2] <= colourDetectionMax[3][2]))) {
        //when orange is detected do two successive right-turns on the spot.
        turn_right();
        turn_right();
      }
  if ((colourInput[0] >= colourDetectionMin[4][0] && colourInput[0] <= colourDetectionMax[4][0]) ||
      (colourInput[1] >= colourDetectionMin[4][1] && colourInput[1] <= colourDetectionMax[4][1]) ||
      (colourInput[2] >= colourDetectionMin[4][2] && colourInput[2] <= colourDetectionMax[4][2])) {
        //when purple is detected do two successive left-turns in two grids.
        move_forward();
        turn_left();
        move_forward();
        turn_left();
      }
  if (((colourInput[0] >= colourDetectionMin[5][0] && colourInput[0] <= colourDetectionMax[5][0]) ||
      (colourInput[1] >= colourDetectionMin[5][1] && colourInput[1] <= colourDetectionMax[5][1]) ||
      (colourInput[2] >= colourDetectionMin[5][2] && colourInput[2] <= colourDetectionMax[5][2])) {
        //when light blue is detected do two successive right-turns in two grids.
        move_forward();
        turn_right();
        move_forward();
        turn_right();
      }    
}
